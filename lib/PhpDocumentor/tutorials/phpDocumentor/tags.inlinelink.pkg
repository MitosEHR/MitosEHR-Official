<refentry id="{@id}">
 <refnamediv>
  <refname>inline {@}link}</refname>
  <refpurpose>Display a link to a URL, or link to an element's documentation in the the flow of descriptive text</refpurpose>
 </refnamediv>
 <refsynopsisdiv>
  <refsynopsisdivinfo>
   <author>
    Gregory Beaver
    <authorblurb>Tag Documentation written by {@link mailto:cellog@php.net cellog@php.net}</authorblurb>
   </author>
   <copyright>Copyright 2002, Gregory Beaver</copyright>
   <releaseinfo>phpDocumentor 0.4+</releaseinfo>
  </refsynopsisdivinfo>
  <cmdsynopsis>
   <group>
    <cmdsynopsis>
     <command>{@}link</command>
     <arg choice="req">URL</arg>
     <arg choice="opt"><option>description</option></arg>
	 <arg choice="plain">}</arg>
	</cmdsynopsis>
    <cmdsynopsis>
     <command>{@}link</command>
     <arg choice="req">element</arg>
     <arg choice="opt"><option>description</option></arg>
	 <arg choice="plain">}</arg>
	</cmdsynopsis>
   </group>
  </cmdsynopsis>
 </refsynopsisdiv>
 <refsect1 id="{@id description}">
  <title>Description</title>
  <para>The inline {@}link} tag is used to document any element (page, global variable, include, class, function, define, method, variable).</para>
  <para><emphasis>New in version 1.2:</emphasis> You can link to any defined function in the current php version using the function's name.  This linking is done using the standard php function {@link PHP_MANUAL#get_defined_functions()}, and so relies on the version of php that is used to execute phpDocumentor.  A benefit of this method is that the function highlighting will automatically upgrade with a php upgrade without any change to the underlying code.  You may also link directly to any portion of the php website using the fake package override PHP_MANUAL (as in PHP_MANUAL#get_defined_functions, or PHP_MANUAL#support.php).</para>
  <caution>inline {@}link} displays links directly in the natural text flow of a DocBlock.  If you want to display links prominently after descriptive text, use {@tutorial tags.see.pkg} or {@tutorial tags.link.pkg}.</caution>
  <para>For parameter information, see {@tutorial tags.see.pkg} or {@tutorial tags.link.pkg}.  The guidelines for giving the element name to inline @link are the same as outlined in the {@tutorial tags.see.pkg} manual page.</para>
 </refsect1>
 <refsect1 id="{@id example}">
  <title>Example</title>
  <para>The inline {@}link} differs from ordinary non-inline tags.  Inline tags parse and display their output directly in the documentation.  In other words, this DocBlock:</para>
  <para>
   <programlisting role="php">
   <![CDATA[
/**
 * Text with a normal @see and @link tag
 * (the parentheses in "element()" are only necessary
 * because it is a function)
 * @see element()
 * @link http://www.example.com
 */
function element()
{
}
   ]]>
   </programlisting>
  </para>
  <para>Parses as (with -o HTML:frames:default):</para>
  <para>
   <programlisting role="tutorial">
   <![CDATA[
<H3>element</H3>
<P><B>element ( )</B></P>
<!-- ========== Info from phpDoc block ========= -->
<b></b>
<pre>
Text with a normal @see and @link tag (the parentheses in "element()" are only necessary because it is a function)
</pre>
<DL>
	<DT>Function Parameters:</DT>
	

	<DT>Function Info:</DT>
	<DD><b>See</b> - <CODE><a href="../default/_fake_page_php.html#element">element()</a></CODE></DD>
	<DD><b>Link</b> - <CODE><a href="www.example.com">www.example.com</a></CODE></DD>
	
</DL>

<HR>
   ]]>
   </programlisting>
  </para>
  <para>
   <programlisting role="php">
   <![CDATA[
/**
 * Text with an {@}link http://www.example.com Inline Link to a Hyperlink} and an inline
 * link to {@}link element()} displays without a break in the flow
 * (again, the parentheses in "element()" are only necessary
 * because it is a function)
 */
function element()
{
}
   ]]>
   </programlisting>
  </para>
  <para>Parses as (with -o HTML:frames:default):</para>
  <para>
   <programlisting role="tutorial">
   <![CDATA[
<H3>element</H3>
<P><B>element ( )</B></P>
<!-- ========== Info from phpDoc block ========= -->
<b></b>
<pre>
Text with an <a href="http://www.example.com">Inline Link to a Hyperlink</a> and
an inline link to <a href="../default/_fake_page_php.html#element">element()</a>
displays without a break in the flow (again, the parentheses in "element()" are only necessary
because it is a function)
</pre>
<DL>
	<DT>Function Parameters:</DT>
	

	<DT>Function Info:</DT>
	
</DL>

<HR>
   ]]>
   </programlisting>
  </para>
 </refsect1>
</refentry>
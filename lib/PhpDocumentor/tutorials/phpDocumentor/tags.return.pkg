<refentry id="{@id}">
 <refnamediv>
  <refname>@return</refname>
  <refpurpose>Specify the return type of a function or method</refpurpose>
 </refnamediv>
 <refsynopsisdiv>
  <refsynopsisdivinfo>
   <author>
    Gregory Beaver
    <authorblurb>Tag Documentation written by {@link mailto:cellog@php.net cellog@php.net}</authorblurb>
   </author>
   <copyright>Copyright 2002, Gregory Beaver</copyright>
   <releaseinfo>phpDocumentor 0.1+</releaseinfo>
  </refsynopsisdivinfo>
  <cmdsynopsis>
    <command>@return</command>
    <arg choice="req">
     <option>datatype</option>
    </arg>
    <arg choice="opt">
     <option>description</option>
    </arg>
   </cmdsynopsis>
  <cmdsynopsis>
    <command>@return</command>
    <arg choice="req">
     <option>datatype1|datatype2</option>
    </arg>
    <arg choice="opt">
     <option>description</option>
    </arg>
   </cmdsynopsis>
 </refsynopsisdiv>
 <refsect1 id="{@id description}">
  <title>Description</title>
  <para>The @return tag is used to document the return value of functions or methods. @returns is an alias for @return to support tag formats of other automatic documentors</para>
  <para>The datatype should be a valid PHP type (int, string, bool, etc), a class name for the type of object returned, or simply &quot;mixed&quot;.  If you want to explicitly show multiple possible return types, list them pipe-delimited without spaces (e.g. &quot;@return int|string&quot;).  If a class name is used as the datatype in the @return tag, phpDocumentor will automatically create a link to that class's documentation.  In addition, if a function returns multiple possible values, separate them using the | character, and phpDocumentor will parse out any class names in the return value.  phpDocumentor will display the optional description unmodified.</para>
 </refsect1>
 <refsect1 id="{@id example}">
  <title>Example</title>
  <para>Here's an example:</para>
  <para>
   <programlisting role="php">
   <![CDATA[
/**
 * example of basic @return usage
 * @return mixed
 */
function function1($baz)
{
   if ($baz)
   {
      $a = 5;
   } else
   {
      $a = array(1,4);
   }
   return $a;
}

/**
 * example of showing multiple possible return types
 * @return int|string  could be an int, could be a string
 */
function function2($foo)
{
   if ($foo)
   {
      return 0;
   }
   else
   {
      return "zero";
   }
}

class class1
{
   /**
    * example of documenting a method, and using optional description with @return
    * @return string de-html_entitied string (no entities at all)
    */
   function bar($foo)
   {
      return strtr($foo,array_flip(get_html_translation_table(HTML_ENTITIES)));
   }
   
   /**
    * example of using @return with a class name
    * @param integer even or odd integer
    * @return Parser|false  phpDocumentor Parser object or error
    */
   function &factory($number)
   {
      $returnval = true;
      if ($number % 2)
      {
          $returnval = new Parser;
      } else
      {
          $returnval = false;
      }
      return $returnval;
   }
}
   ]]>
   </programlisting>
  </para>
 </refsect1>
</refentry>
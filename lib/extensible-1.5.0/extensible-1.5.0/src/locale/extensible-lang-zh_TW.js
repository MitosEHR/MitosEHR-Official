/*!
 * Extensible 1.5.0
 * Copyright(c) 2010-2011 Extensible, LLC
 * licensing@ext.ensible.com
 * http://ext.ensible.com
 */
/*!
 * Extensible 1.5.0
 * Copyright(c) 2010-2011 Extensible, LLC
 * licensing@ext.ensible.com
 * http://ext.ensible.com
 */
/*
 * Chinese (Traditional)
 * By frank cheung v0.1
 * encoding: utf-8
 */

Extensible.Date.use24HourTime = false;

if(Extensible.calendar.view.AbstractCalendar) {
    Ext.apply(Extensible.calendar.view.AbstractCalendar.prototype, {
        startDay: 0,
        todayText: 'ä»Šæ—¥',
        defaultEventTitleText: '(æ²’æ¨™é¡Œ)',
        ddCreateEventText: 'ç‚º{0}å‰µå»ºäº‹ä»¶',
        ddMoveEventText: 'ç§»å‹•äº‹ä»¶åˆ°{0}',
        ddResizeEventText: 'æ›´æ–°äº‹ä»¶åˆ°{0}'
    });
}

if(Extensible.calendar.view.Month) {
    Ext.apply(Extensible.calendar.view.Month.prototype, {
        moreText: '+{0}æ›´å¤šâ€¦â€¦',
        getMoreText: function(numEvents){
            return '+{0}æ›´å¤šâ€¦â€¦';
        },
        detailsTitleDateFormat: 'F j'
    });
}

if(Extensible.calendar.CalendarPanel) {
    Ext.apply(Extensible.calendar.CalendarPanel.prototype, {
        todayText: 'ä»Šæ—¥',
        dayText: 'æ—¥',
        weekText: 'æ˜ŸæœŸ',
        monthText: 'æœˆ',
        jumpToText: 'èª¿åˆ°ï¼š',
        goText: 'åˆ° ',
        multiDayText: '{0}å¤©',
        multiWeekText: '{0}æ˜ŸæœŸ',
        getMultiDayText: function(numDays){
            return '{0}å¤©';
        },
        getMultiWeekText: function(numWeeks){
            return '{0}æ˜ŸæœŸ';
        }
    });
}

if(Extensible.calendar.form.EventWindow) {
    Ext.apply(Extensible.calendar.form.EventWindow.prototype, {
        width: 600,
        labelWidth: 65,
        titleTextAdd: 'æ·»åŠ äº‹ä»¶',
        titleTextEdit: 'ç·¨è¼¯äº‹ä»¶',
        savingMessage: 'ä¿?å­˜æ›´æ”¹â€¦â€¦',
        deletingMessage: 'åˆªé™¤äº‹ä»¶â€¦â€¦',
        detailsLinkText: 'ç·¨è¼¯è©³ç´°â€¦â€¦',
        saveButtonText: 'ä¿?å­˜',
        deleteButtonText: 'åˆªé™¤',
        cancelButtonText: 'å?–æ¶ˆ',
        titleLabelText: 'æ¨™é¡Œ',
        datesLabelText: 'ç•¶åœ¨',
        calendarLabelText: 'æ—¥æ›†'
    });
}

if(Extensible.calendar.form.EventDetails) {
    Ext.apply(Extensible.calendar.form.EventDetails.prototype, {
        labelWidth: 65,
        labelWidthRightCol: 65,
        title: 'äº‹ä»¶ä¾†è‡ª',
        titleTextAdd: 'æ·»åŠ äº‹ä»¶',
        titleTextEdit: 'ç·¨è¼¯äº‹ä»¶',
        saveButtonText: 'ä¿?å­˜',
        deleteButtonText: 'åˆªé™¤',
        cancelButtonText: 'å?–æ¶ˆ',
        titleLabelText: 'æ¨™é¡Œ',
        datesLabelText: 'ç•¶åœ¨',
        reminderLabelText: 'æ??é†’å™¨',
        notesLabelText: 'ä¾¿ç®‹',
        locationLabelText: 'ä½?ç½®',
        webLinkLabelText: 'Webé?ˆæŽ¥',
        calendarLabelText: 'æ—¥æ›†',
        repeatsLabelText: 'é‡?å¾©'
    });
}

if(Extensible.form.field.DateRange) {
    Ext.apply(Extensible.form.field.DateRange.prototype, {
        toText: 'åˆ°',
        allDayText: 'å…¨å¤©'
    });
}

if(Extensible.calendar.form.field.CalendarCombo) {
    Ext.apply(Extensible.calendar.form.field.CalendarCombo.prototype, {
        fieldLabel: 'æ—¥æ›†'
    });
}

if(Extensible.calendar.gadget.CalendarListPanel) {
    Ext.apply(Extensible.calendar.gadget.CalendarListPanel.prototype, {
        title: 'æ—¥æ›†'
    });
}

if(Extensible.calendar.gadget.CalendarListMenu) {
    Ext.apply(Extensible.calendar.gadget.CalendarListMenu.prototype, {
        displayOnlyThisCalendarText: 'å?ªé¡¯ç¤ºè©²æ—¥æ›†'
    });
}

if(Extensible.form.recurrence.Combo) {
    Ext.apply(Extensible.form.recurrence.Combo.prototype, {
        fieldLabel: 'é‡?å¾©',
        recurrenceText: {
            none: 'ä¸?é‡?å¾©',
            daily: 'æ¯?å¤©',
            weekly: 'æ¯?æ˜ŸæœŸ',
            monthly: 'æ¯?æœˆ',
            yearly: 'æ¯?å¹´'
        }
    });
}

if(Extensible.calendar.form.field.ReminderCombo) {
    Ext.apply(Extensible.calendar.form.field.ReminderCombo.prototype, {
        fieldLabel: 'æ??é†’å™¨',
        noneText: 'æ²’æœ‰',
        atStartTimeText: 'äºŽå•Ÿå‹•æ™‚é–“',
        getMinutesText: function(numMinutes){
            return 'åˆ†é?˜';
        },
        getHoursText: function(numHours){
            return 'å°?æ™‚';
        },
        getDaysText: function(numDays){
            return 'å¤©';
        },
        getWeeksText: function(numWeeks){
            return 'æ˜ŸæœŸ';
        },
        reminderValueFormat: 'é›¢é–‹å§‹é‚„æœ‰{0} {1}' // e.g. "2 hours before start"
    });
}

if(Extensible.form.field.DateRange) {
    Ext.apply(Extensible.form.field.DateRange.prototype, {
        dateFormat: 'n/j/Y'
    });
}

if(Extensible.calendar.menu.Event) {
    Ext.apply(Extensible.calendar.menu.Event.prototype, {
        editDetailsText: 'ç·¨è¼¯è©³ç´°',
        deleteText: 'åˆªé™¤',
        moveToText: 'ç§»å‹•åˆ°â€¦â€¦'
    });
}

if(Extensible.calendar.dd.DropZone) {
    Ext.apply(Extensible.calendar.dd.DropZone.prototype, {
        dateRangeFormat: '{0}-{1}',
        dateFormat: 'n/j'
    });
}

if(Extensible.calendar.dd.DayDropZone) {
    Ext.apply(Extensible.calendar.dd.DayDropZone.prototype, {
        dateRangeFormat: '{0}-{1}',
        dateFormat : 'n/j'
    });
}

if(Extensible.calendar.template.BoxLayout) {
    Ext.apply(Extensible.calendar.template.BoxLayout.prototype, {
        firstWeekDateFormat: 'D j',
        otherWeeksDateFormat: 'j',
        singleDayDateFormat: 'l, F j, Y',
        multiDayFirstDayFormat: 'M j, Y',
        multiDayMonthStartFormat: 'M j'
    });
}

if(Extensible.calendar.template.Month) {
    Ext.apply(Extensible.calendar.template.Month.prototype, {
        dayHeaderFormat: 'D',
        dayHeaderTitleFormat: 'l, F j, Y'
    });
}